description = "Web server interface to OCaml"
version = "%%VERSION%%"

requires = "rresult hmap astring"
archive(byte) = "webs.cma"
archive(native) = "webs.cmxa"
plugin(byte) = "webs.cma"
plugin(native) = "webs.cmxs"
exists_if = "webs.cma"

package "cgi" (
  description = "Webs CGI connector"
  version = "%%VERSION%%"
  requires = "rresult webs"
  archive(byte) = "webs_cgi.cma"
  archive(native) = "webs_cgi.cmxa"
  plugin(byte) = "webs_cgi.cma"
  plugin(native) = "webs_cgi.cmxs"
  exists_if = "webs_cgi.cma"
)

package "scgi" (
  description = "Webs SCGI connector"
  version = "%%VERSION%%"
  requires = "rresult webs bos"
  archive(byte) = "webs_scgi.cma"
  archive(native) = "webs_scgi.cmxa"
  plugin(byte) = "webs_scgi.cma"
  plugin(native) = "webs_scgi.cmxs"
  exists_if = "webs_scgi.cma"
)

package "unix" (
  description = "Webs configuration keys for unix backends"
  version = "%%VERSION%%"
  requires = "unix rresult webs"
  archive(byte) = "webs_services.cma"
  archive(native) = "webs_services.cmxa"
  plugin(byte) = "webs_services.cma"
  plugin(native) = "webs_services.cmxs"
  exists_if = "webs_services.cma"
)

package "use" (
  description = "Webs utility services and layers"
  version = "%%VERSION%%"
  requires = "webs"
  archive(byte) = "webs_use.cma"
  archive(native) = "webs_use.cmxa"
  plugin(byte) = "webs_use.cma"
  plugin(native) = "webs_use.cmxs"
  exists_if = "webs_use.cma"
)

package "cli" (
  description = "Webs command line interface support"
  version = "%%VERSION%%"
  requires = "cmdliner webs"
  archive(byte) = "webs_cli.cma"
  archive(native) = "webs_cli.cmxa"
  plugin(byte) = "webs_cli.cma"
  plugin(native) = "webs_cli.cmxs"
  exists_if = "webs_cli.cma"
)
