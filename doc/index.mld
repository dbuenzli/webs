{0 Webs {%html: <span class="version">%%VERSION%%</span>%}}

Webs is a toolkit for programming with HTTP in OCaml. It provides:

{ul
{- IO agnostic representations for HTTP {{!Webs.Http.Request}requests}
   and {{!Webs.Http.Response}responses}.}
{- Optional HTTP service building blocks.
   {{!page-http_service_howto.serving_files}File serving},
   {{!Webs_authenticated_cookie}authenticated cookies},
   {{!Webs_session}sessions}, etc.}
{- Connectors for running HTTP services defined as function mapping
   requests to responses. {{!Webs_cgi}CGI} and
   {{!Webs_http11_gateway}HTTP/1.1 gateway} connectors are provided,
   but you can bring your own.}}

Webs is not a framework, it is a set of building blocks.

{1:manuals Manuals}

These manuals are available:

{ul
{- The {{!page-http_service_howto}HTTP service howto} explains how to
   define, compile and run a service behind an HTTP gateway and let
   it serve files and webpages efficiently.}
{- The {{!page-connector_conventions}connector conventions} explain
   how service and client connectors construct and interpret request
   and response values. It's a good idea to read it to understand how
   connectors behave in certain edge cases.}
{- The {{!page-tutorial}tutorial} is a more involved example to get you
   started.}
{- The {{!current_limitations}current limitations} should help you
   deciding whether Webs is suitable for you.}
{- The {{!page-todo}TODO} is a few things that are todo}}

The {{:https://github.com/dbuenzli/webs/tree/master/examples}examples}
directory of the repository has a few simple examples that use the
APIs.

{1:webs Library [webs]}

{!modules:
Webs_url
Webs}

{1:webs_kit Library [webs.kit]}

{!modules:
Webs_gateway
Webs_hash
Webs_authenticatable
Webs_authenticated_cookie
Webs_session
Webs_basic_auth
Webs_bazaar
}

{1:webs_unit Library [webs.unix]}

Provides tools to send files and simple connectors. Depends on OCaml's
[unix] library.

{!modules:
Webs_unix
Webs_thread_pool
Webs_listener
Webs_fs
}

{2:service_connectors Service connectors}
{!modules:
Webs_cgi
Webs_http11_gateway}

{1:webs_cli Library [webs.cli]}

Standard command line options and quick service setup.

{!modules:
Webs_cli
Webs_quick
}

{1:current_limitations Current limitations}

Before using Webs for your project you should be aware of
these current limitations:

{ul
{- All available {{!service_connectors}connectors} do not talk directly to the
   internet and do not talk [https]. You need to pair your service
   with an HTTP gateway like Apache, nginx, etc. See the
   {{!page-http_service_howto}HTTP service howto} for more details.}
{- TODO chunked encoding}
{- Webs supports the [application/x-www-form-urlencoded] content type for
   form posting but it's missing an implementation of the [multipart/form]
   body content type (e.g. to upload files). This will be added in the future
   so that {!Webs.Http.Request.to_query} eventually abstracts over all forms of
   queries.}
{- The architecture of the {!Webs_http11_gateway} connector will not
   fare well if you need to support WebSockets or SSE at scale.}
{- There is no connector for supporting the client view.}}

Finally note that while Webs is unlikely to change drastically, making
some breaking changes in the future is not excluded.
